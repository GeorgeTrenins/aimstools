#!/usr/bin/env python
import argparse
from aimstools.misc import *
from aimstools.preparation import FHIAimsSetup, FHIVibesSetup


def parseArguments():
    # Create argument parser
    parser = argparse.ArgumentParser()

    # Positional mandatory arguments
    parser.add_argument("geometryfile", help="Path to geometry file", type=str)

    # Optional arguments
    parser.add_argument(
        "--xc",
        help="Exchange correlation functional (default pbe)",
        type=str,
        default="pbe",
    )
    parser.add_argument(
        "--spin",
        help="Spin keyword (none or collinear, default none)",
        type=str,
        default="none",
    )
    parser.add_argument(
        "-t", "--tier", help="basis set tier (default 1)", type=int, default=1
    )
    parser.add_argument(
        "-b",
        "--basis",
        help="Basis set type (default tight)",
        type=str,
        default="tight",
    )
    parser.add_argument(
        "--k_grid",
        help="Number of k-points per reciprocal lattice direction for x, y, z",
        nargs="+",
        type=int,
        default=[],
    )
    parser.add_argument(
        "-k",
        "--k_density",
        help="Line k-point density (default: 5)",
        type=int,
        default=5,
    )
    parser.add_argument(
        "-j",
        "--jobs",
        "--task",
        "--tasks",
        nargs="+",
        help="""List of task(s) to perform:
        None (default) = single point;
        bs = band structure;
        fatbs = mulliken-projected band structure;
        dos = density of states;
        go = relaxation (via FHI-vibes);
        phonons = phonons (via FHI-vibes)""",
        type=str,
        default=["None"],
        dest="tasks",
    )
    parser.add_argument(
        "-f",
        help="Force overwrite existing files.",
        action="store_true",
        dest="overwrite",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        help="Verbosity level, e.g. -v, -vv, default 0)",
        action="count",
        default=0,
    )
    parser.add_argument(
        "-s",
        "--standardize",
        help="Standardize structure via spglib with enforced axes order.",
        action="store_true",
    )
    # Parse arguments
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = vars(parseArguments())
    overwrite = args.pop("overwrite")
    verbosity = args.pop("verbose")
    geometryfile = args.pop("geometryfile")
    standardize = args.pop("standardize")
    tasks = args["tasks"]
    set_verbosity_level(verbosity)
    vibes_keywords = [
        "relaxation",
        "go",
        "geometry",
        "phonons",
        "phonon",
        "phonopy",
    ]
    aims_keywords = ["bs", "dos", "fatbs"]

    tasks = [k.lower() for k in args["tasks"]]
    if any(x in vibes_keywords for x in tasks):
        assert not any(
            x in aims_keywords for x in tasks
        ), "You cannot perform electronic analysis in relaxations or phonon calculations."
        relax = any(x in ["relaxation", "go", "geometry"] for x in tasks)
        phon = any(x in ["phonons", "phonon", "phonopy"] for x in tasks)
        assert not (
            relax and phon
        ), "You can only specify either relaxation or phonons as task."
        vibup = FHIVibesSetup(geometryfile, **args)
        if standardize:
            logger.info("Standardizing structure ...")
            vibup.structure.standardize()
        vibup.setup_geometry(overwrite=overwrite)
        if relax:
            vibup.setup_relaxation(overwrite=overwrite)
            vibup.write_submission_file("relaxation", overwrite=overwrite)
        elif phon:
            vibup.setup_phonopy(overwrite=overwrite)
            vibup.write_submission_file("phonopy", overwrite=overwrite)
    else:
        ais = FHIAimsSetup(geometryfile, **args)
        if standardize:
            logger.info("Standardizing structure ...")
            ais.structure.standardize()
        ais.setup_geometry(overwrite=overwrite)
        ais.setup_control(overwrite=overwrite)
        ais.write_submission_file(overwrite=overwrite)
