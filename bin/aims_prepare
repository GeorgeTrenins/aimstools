#!/usr/bin/env python
import typer
from aimstools.misc import *
from aimstools.preparation import FHIAimsSetup, FHIVibesSetup

from typing import Tuple, List, Optional

app = typer.Typer(add_completion=False)


@app.command(
    context_settings={"allow_extra_args": True, "ignore_unknown_options": True},
    help=typer.style(
        """Example:\n
        aims_prepare test.cif -bs -dos -f -s --tier 1 --basis light""",
        fg=typer.colors.GREEN,
        bold=False,
    ),
)
def main(
    geometryfile: str,
    bs: Optional[bool] = typer.Option(
        False,
        "-bs",
        help="Prepare regular band structure calculation.",
        show_default=False,
    ),
    mbs: Optional[bool] = typer.Option(
        False,
        "-mbs",
        help="Prepare mulliken-projected band structure calculation.",
        show_default=False,
    ),
    dos: Optional[bool] = typer.Option(
        False,
        "-dos",
        help="Prepare atom-projected density of states calculation.",
        show_default=False,
    ),
    abs: Optional[bool] = typer.Option(
        False,
        "-abs",
        help="Prepare UV/Vis absorption spectrum calculation.",
        show_default=False,
    ),
    go: Optional[bool] = typer.Option(
        False, "-go", help="Prepare relaxation via FHI-vibes.", show_default=False
    ),
    phon: Optional[bool] = typer.Option(
        False,
        "-phon",
        help="Prepare phonon calculation via FHI-vibes.",
        show_default=False,
    ),
    xc: str = typer.Option("pbe", "--xc", help="Exchange correlation functional."),
    spin: str = typer.Option(
        "none",
        "--spin",
        help="Restricted (none) or unrestricted (collinear) spin treatment.",
    ),
    tier: int = typer.Option(1, "-t", "--tier", help="Basis set tier."),
    basis: str = typer.Option("tight", "-b", "--basis", help="Basis set grid."),
    k_grid: Tuple[int, int, int] = typer.Option(
        (None, None, None),
        "--k_grid",
        help="Number of k-points per reciprocal lattice direction.",
        show_default=False,
    ),
    k_density: float = typer.Option(
        5, "-k", "--k_density", help="Line k-point density in points / Angstr√∂m."
    ),
    overwrite: bool = typer.Option(
        False, "-f", "--force_overwrite", help="Force overwrite existing files."
    ),
    verbosity: int = typer.Option(
        1, "--verbosity", "-v", count=True, help="Set verbosity level."
    ),
    standardize: bool = typer.Option(
        False,
        "-s",
        "--standardize",
        help="Standardize structure via spglib with enforced axes order.",
    ),
):

    set_verbosity_level(verbosity)
    vibes_tasks = dict(zip(["go", "phonons"], [go, phon]))
    aims_tasks = dict(zip(["bs", "mbs", "dos", "abs"], [bs, mbs, dos, abs]))
    k_grid = [] if k_grid == (None, None, None) else k_grid

    args = {
        "xc": xc,
        "spin": spin,
        "tier": tier,
        "basis": basis,
        "k_grid": k_grid,
        "k_density": k_density,
    }
    assert (any(aims_tasks.values()) and not any(vibes_tasks.values())) or (
        not any(aims_tasks.values()) and any(vibes_tasks.values())
    ), "You cannot run electronic structure calculations and relaxations or phonons at the same time."

    if any(vibes_tasks.values()):
        assert not (
            go and phon
        ), "You cannot run relaxations and phonons at the same time."
        if go:
            logger.info("Preparing relaxation via FHI-vibes.")
            vibup = FHIVibesSetup(geometryfile, tasks=["go"], **args)
            if standardize:
                logger.info("Standardizing structure ...")
                vibup.structure.standardize()
            vibup.setup_geometry(overwrite=overwrite)
            vibup.setup_relaxation(overwrite=overwrite)
            vibup.write_submission_file("relaxation", overwrite=overwrite)
        if phon:
            logger.info("Preparing phonon calculation via FHI-vibes.")
            vibup = FHIVibesSetup(geometryfile, tasks=["phonons"], **args)
            if standardize:
                logger.info("Standardizing structure ...")
                vibup.structure.standardize()
            vibup.setup_geometry(overwrite=overwrite)
            vibup.setup_phonopy(overwrite=overwrite)
            vibup.write_submission_file("phonopy", overwrite=overwrite)

    if any(aims_tasks.values()):
        if bs:
            logger.info("Preparing regular band structure calculation.")
        if mbs:
            logger.info("Preparing mulliken-projected band structure calculation.")
        if dos:
            logger.info("Preparing atom-projected density of states calculation.")
        if abs:
            logger.info(
                "Preparing UV/Vis absorption spectrum calculation via linear macroscopic dielectric tensor."
            )
        tasks = [k for k, v in aims_tasks.items() if v]
        ais = FHIAimsSetup(geometryfile, tasks=tasks, **args)
        if standardize:
            logger.info("Standardizing structure ...")
            ais.structure.standardize()
        ais.setup_geometry(overwrite=overwrite)
        ais.setup_control(overwrite=overwrite)
        ais.write_submission_file(overwrite=overwrite)


if __name__ == "__main__":
    app()
