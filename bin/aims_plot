#!/usr/bin/env python
import typer
from typer.params import Option
from aimstools.misc import *

from pathlib import Path
from typing import Tuple, List, Optional

from aimstools import BandStructure, DensityOfStates
from aimstools.phonons import FHIVibesPhonons

app = typer.Typer(add_completion=False)


@app.command(
    context_settings={"allow_extra_args": True, "ignore_unknown_options": True},
    help=typer.style(
        """Parse keyword arguments as key=value pairs, e.g.:\n
    aims_plot -bs path/ -dos path/ -t paper bandpath='GMKG'""",
        fg=typer.colors.GREEN,
        bold=False,
    ),
)
def main(
    ctx: typer.Context,
    bs: Optional[Path] = typer.Option(None, "-bs", help="Path to bandstructure files."),
    dos: Optional[Path] = typer.Option(
        None, "-dos", help="Path to density of states files."
    ),
    phons: Optional[Path] = typer.Option(
        None, "-ph", help="Path to FHI-vibes phonon calculation."
    ),
    hide_bz: bool = typer.Option(False, "--hbz", help="Hide Brillouin Zone"),
    verbosity: int = typer.Option(
        1, "--verbosity", "-v", count=True, help="Set verbosity level."
    ),
    target: str = typer.Option(
        "presentation",
        "-t",
        "--target",
        help="Plotting target, can be presentation or paper.",
    ),
):
    allow_plotting = os.environ.get("AIMSOOLS_ALLOW_PLOTTING")
    if allow_plotting == "FALSE":
        raise Exception(
            "The plotting functionalities are not available on this system, e.g., if you are running aimstools on a cluster."
        )

    kwargs = []
    for i in ctx.args:
        items = i.split("=")
        key = items[0].strip()
        value = items[1].strip()
        if value.lower() == "false":
            value = False
        elif value.lower() == "true":
            value = True
        try:
            value = float(value)
        except:
            pass
        try:
            value = int(value)
        except:
            pass
        kwargs.append((key, value))
    kwargs = dict(kwargs)

    set_verbosity_level(verbosity)
    set_global_plotsettings(target)

    filename = "aimsplot.png" if target == "paper" else None
    show = True if ((target == "presentation") and (filename == None)) else False

    count = 0
    tasks = []
    width_ratios = []
    projections = []
    if bs != None:
        bs = BandStructure(bs)
        try:
            bs.get_properties()
        except:
            logger.error("Could not get band structure properties.")
        tasks.append("bs")
        width_ratios.append(2)
        projections.append("rectilinear")
        count += 1
    if dos != None:
        dos = DensityOfStates(dos)
        tasks.append("dos")
        width_ratios.append(1)
        projections.append("rectilinear")
        count += 1
    if bs is not None and not hide_bz:
        tasks.append("bz")
        width_ratios.append(3)
        projections.append("3d")
        count += 1
    if phons != None:
        phons = FHIVibesPhonons(phons)
        tasks.append("phon")
        width_ratios.append(2)
        projections.append("rectilinear")
        count += 1

    figsize = (count * 2.5, 5)
    with AxesContext(
        ax=None,
        ncols=count,
        width_ratios=width_ratios,
        projections=[projections],
        figsize=figsize,
        show=show,
        filename=filename,
    ) as axes:
        for i, task in enumerate(tasks):
            ax = axes if count == 1 else axes[i]
            if task == "bs":
                bs.plot(axes=ax, **kwargs)
            if task == "dos":
                if bs is not None:
                    ref = bs.reference
                    kwargs["reference"] = ref
                    dos.plot(axes=ax, **kwargs)
                    ax.set_ylim(axes[0].get_ylim())
                    ax.set_ylabel("")
                    ax.set_xticks([])
                    ax.set_xlabel("DOS")
                    ax.set_yticks([])
                else:
                    dos.plot(axes=ax, **kwargs)
            if task == "bz":
                bs.plot_brillouin_zone(axes=ax)
            if task == "phon":
                phons.plot(axes=ax, **kwargs)
    if filename is not None:
        logger.info("Saved figure to file aimsplot.png with publication settings.")


if __name__ == "__main__":
    app()
